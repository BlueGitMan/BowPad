[C/C++]
code = typedef constexpr unique_ptr shared_ptr CreateFile ReadFile WriteFile
snippet_do=do\n{\n} while(^0true^);
snippet_for=for (^0size_t^ ^1i^ = 0; ^1i^ < ^2count^; ++^1i^)\n{\n}
snippet_while=while (^0true^)\n{\n}
snippet_class=class ^0MyClass^\n{\npublic:\n\t^0MyClass^();\n~^0MyClass^();\n\b\n\bprotected:\n\nprivate:\n\n};\n
snippet_enum=enum ^0MyEnum^\n{\n};\n
snippet_switch=switch (^0switch_on^)\n{\tdefault:\nbreak;\n}\n
snippet_try=try\n{\n}\ncatch (const std::exception&)\n{\n}\n

[C Sharp]
snippet_attribute=[global::System.AttributeUsage(global::System.AttributeTargets.^0All^, Inherited = ^1false^, AllowMultiple = ^2true^)]\nsealed class ^3MyAttribute^ : global::System.Attribute\n{\n\t// See the attribute guidelines at\n//  http://go.microsoft.com/fwlink/?LinkId=85236\nreadonly string positionalString;\n\n// This is a positional argument\npublic ^3MyAttribute^(string positionalString)\n{\n\tthis.positionalString = positionalString;\n\n// TODO: Implement code here\n\nthrow new global::System.NotImplementedException();\n\b}\n\npublic string PositionalString\n{\n\tget { return positionalString; }\n\b}\n\n// This is a named argument\npublic int NamedInt { get; set; }\n\b}\n
snippet_class=class ^0MyClass^\n{\n\n}\n
snippet_cw=global::System.Console.WriteLine();
snippet_do=do\n{\n} while(^0true^);
snippet_enum=enum ^0MyEnum^\n{\n\n}\n
snippet_equals=public override bool Equals(object obj)\n{\n\t//\n// See the full list of guidelines at\n//   http://go.microsoft.com/fwlink/?LinkID=85237\n// and also the guidance for operator== at\n//   http://go.microsoft.com/fwlink/?LinkId=85238\n//\n\nif (obj == null || GetType() != obj.GetType())\n{\n\treturn false;\n\b}\n\n// TODO: write your implementation of Equals() here\nthrow new global::System.NotImplementedException();\nreturn base.Equals(obj);\n\b}\n
snippet_exception=[global::System.Serializable]\npublic class ^0MyException^ : ^1global::System.Exception^\n{\n\tpublic ^0MyException^() { }\npublic ^0MyException^(string message) : base(message) { }\npublic ^0MyException^(string message, global::System.Exception inner) : base(message, inner) { }\nprotected ^0MyException^(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context) { }\n\b}\n
snippet_for=for (^0int^ ^1i^ = 0; ^1i^ < ^2lenght^; ++^1i^)\n{\n}
snippet_foreach=foreach (^0var^ ^1item^ in ^2collection^)\n{\n}
snippet_forr=for (^0int^ ^1i^ = ^2lenght^; ^1i^ >= 0; --^1i^)\n{\n}
snippet_indexer=public ^0object^ this[^1int^ index]\n{\n\tget { /* return the specified index here */ }\nset { /* set the specified index to value here */ }\n\b}
snippet_interface=interface I^0Interface^\n{\n}
snippet_iterator=public System.Collections.Generic.IEnumerator<^0ElementType^> GetEnumerator()\n{\n\tthrow new global::System.NotImplementedException();\nyield return default(^0ElementType^);\n\b}
snippet_lock=lock (^0this^)\n{\n}
snippet_mbox=global::System.Windows.Forms.MessageBox.Show(^0"Test"^);
snippet_namespace=namespace ^name^\n{\n}
snippet_prop=public ^0int^ ^1MyProperty^ { get; set; }
snippet_propa=public static ^0int^ Get^1MyProperty^(DependencyObject obj)\n{\n\treturn (^0int^)obj.GetValue(^1MyProperty^Property);\n\b}\n\npublic static void Set^1MyProperty^(DependencyObject obj, ^0int^ value)\n{\n\tobj.SetValue(^1MyProperty^Property, value);\n\b}\n\n// Using a DependencyProperty as the backing store for ^1MyProperty^.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty ^1MyProperty^Property = DependencyProperty.RegisterAttached("^1MyProperty^", typeof(^0int^), typeof(^2ownerclass^), new PropertyMetadata(^30^));\n
snippet_propdp=public ^0int^ ^1MyProperty^\n{\n\tget { return (^0int^)GetValue(^1MyPropertyProperty^); }\nset { SetValue(^1MyProperty^Property, value); }\n\b}\n\n// Using a DependencyProperty as the backing store for ^1MyProperty^.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty ^1MyProperty^Property = DependencyProperty.Register("MyProperty", typeof(^0int^), typeof(^2ownerclass^), new PropertyMetadata(^30^));\n
snippet_switch=switch (^0switch_on^)\n{\tdefault:\n}\n
snippet_try=try\n{\n}\ncatch (^0global::System.Exception^)\n{\n\tthrow;\n\b}\n
snippet_while=while (^0true^)\n{\n}




