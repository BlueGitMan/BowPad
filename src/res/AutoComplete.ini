[C/C++]
code = typedef constexpr unique_ptr shared_ptr CreateFile ReadFile WriteFile
snippet_do=do\n{\n} while(^0true^);
snippet_for=for (^0size_t^ ^1i^ = 0; ^1i^ < ^2count^; ++^1i^)\n{\n}
snippet_while=while (^0true^)\n{\n}
snippet_class=class ^0MyClass^\n{\npublic:\n\t^0MyClass^();\n~^0MyClass^();\n\b\n\bprotected:\n\nprivate:\n\n};\n
snippet_enum=enum ^0MyEnum^\n{\n};\n
snippet_switch=switch (^0switch_on^)\n{\tdefault:\nbreak;\n}\n
snippet_try=try\n{\n}\ncatch (const std::exception&)\n{\n}\n

[C Sharp]
snippet_attribute=[global::System.AttributeUsage(global::System.AttributeTargets.^0All^, Inherited = ^1false^, AllowMultiple = ^2true^)]\nsealed class ^3MyAttribute^ : global::System.Attribute\n{\n\t// See the attribute guidelines at\n//  http://go.microsoft.com/fwlink/?LinkId=85236\nreadonly string positionalString;\n\n// This is a positional argument\npublic ^3MyAttribute^(string positionalString)\n{\n\tthis.positionalString = positionalString;\n\n// TODO: Implement code here\n\nthrow new global::System.NotImplementedException();\n\b}\n\npublic string PositionalString\n{\n\tget { return positionalString; }\n\b}\n\n// This is a named argument\npublic int NamedInt { get; set; }\n\b}\n
snippet_class=class ^0MyClass^\n{\n\n}\n
snippet_cw=global::System.Console.WriteLine();
snippet_do=do\n{\n} while(^0true^);
snippet_enum=enum ^0MyEnum^\n{\n\n}\n
snippet_equals=public override bool Equals(object obj)\n{\n\t//\n// See the full list of guidelines at\n//   http://go.microsoft.com/fwlink/?LinkID=85237\n// and also the guidance for operator== at\n//   http://go.microsoft.com/fwlink/?LinkId=85238\n//\n\nif (obj == null || GetType() != obj.GetType())\n{\n\treturn false;\n\b}\n\n// TODO: write your implementation of Equals() here\nthrow new global::System.NotImplementedException();\nreturn base.Equals(obj);\n\b}\n
snippet_exception=[global::System.Serializable]\npublic class ^0MyException^ : ^1global::System.Exception^\n{\n\tpublic ^0MyException^() { }\npublic ^0MyException^(string message) : base(message) { }\npublic ^0MyException^(string message, global::System.Exception inner) : base(message, inner) { }\nprotected ^0MyException^(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context) { }\n\b}\n
snippet_for=for (^0int^ ^1i^ = 0; ^1i^ < ^2lenght^; ++^1i^)\n{\n}
snippet_foreach=foreach (^0var^ ^1item^ in ^2collection^)\n{\n}
snippet_forr=for (^0int^ ^1i^ = ^2lenght^; ^1i^ >= 0; --^1i^)\n{\n}
snippet_indexer=public ^0object^ this[^1int^ index]\n{\n\tget { /* return the specified index here */ }\nset { /* set the specified index to value here */ }\n\b}
snippet_interface=interface I^0Interface^\n{\n}
snippet_iterator=public System.Collections.Generic.IEnumerator<^0ElementType^> GetEnumerator()\n{\n\tthrow new global::System.NotImplementedException();\nyield return default(^0ElementType^);\n\b}
snippet_lock=lock (^0this^)\n{\n}
snippet_mbox=global::System.Windows.Forms.MessageBox.Show(^0"Test"^);
snippet_namespace=namespace ^name^\n{\n}
snippet_prop=public ^0int^ ^1MyProperty^ { get; set; }
snippet_propa=public static ^0int^ Get^1MyProperty^(DependencyObject obj)\n{\n\treturn (^0int^)obj.GetValue(^1MyProperty^Property);\n\b}\n\npublic static void Set^1MyProperty^(DependencyObject obj, ^0int^ value)\n{\n\tobj.SetValue(^1MyProperty^Property, value);\n\b}\n\n// Using a DependencyProperty as the backing store for ^1MyProperty^.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty ^1MyProperty^Property = DependencyProperty.RegisterAttached("^1MyProperty^", typeof(^0int^), typeof(^2ownerclass^), new PropertyMetadata(^30^));\n
snippet_propdp=public ^0int^ ^1MyProperty^\n{\n\tget { return (^0int^)GetValue(^1MyPropertyProperty^); }\nset { SetValue(^1MyProperty^Property, value); }\n\b}\n\n// Using a DependencyProperty as the backing store for ^1MyProperty^.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty ^1MyProperty^Property = DependencyProperty.Register("MyProperty", typeof(^0int^), typeof(^2ownerclass^), new PropertyMetadata(^30^));\n
snippet_switch=switch (^0switch_on^)\n{\tdefault:\n}\n
snippet_try=try\n{\n}\ncatch (^0global::System.Exception^)\n{\n\tthrow;\n\b}\n
snippet_while=while (^0true^)\n{\n}

[Html]
snippet_a=a href="^0#^">^1content^</a>
snippet_base=base href="^0/^" />
snippet_form=form action="^0/^" method="^1post^"></form>
snippet_html=html xmlns="http://www.w3.org/1999/xhtml">\n\t<head>\n\t<title></title>\n\b</head>\n<body>\n</body>\n\b</html>
snippet_iframe=iframe src="^0file.html^"></iframe>
snippet_link=link href="^0#^" rel="stylesheet" />
snippet_picture=picture>\n\t<source media="(min-width: 465px)" srcset="^0file^-small.jpg" />\n<source media="(min-width: 650px)" srcset="^0file^-medium.jpg" />\n<img src="^0file^.jpg" alt="" />\n\b</picture>
snippet_region=<!-- #region name -->\n<!-- #endregion -->
snippet_select=select>\n\t<option value="^0value^">^1text^</option>\n\b</select>
snippet_svg=svg xmlns="http://www.w3.org/2000/svg">^0^</svg>
snippet_table=table>\n\t<tr>\n\t<td>^0^</td>\n\b</tr>\n\b</table>
snippet_ul=ul>\n\t<li>^0^</li>\n\b</ul>\n


[CSS]
code=after before html body hover content code footer header media
snippet_font-face=font-face {\n\tfont-family: '^0font name^';\nsrc: url('^1/content/file^.eot');\nsrc: local('☺'), url('^1/content/file^.woff') format('woff'), url('^1/content/file^.ttf') format('truetype');\n\b}
snippet_keyframes=keyframes name {\n\tfrom {\n\tbackground: red;\n\b}\n\nto {\n\tbackground: yellow;\n\b}\n\b}\n\n@-moz-keyframes name {\n}\n\n@-webkit-keyframes name {\n}\n
snippet_media=media only screen and (max-width: ^01024^px) and (max-height: ^1768^px) {\n}

[Python]
code=import except print
snippet_bytes=bytes(^0x^, ^1encoding^, ^2error^)
snippet_callable=callable(^0object^)
snippet_compile=compile(^0source^, ^1filename^, ^2mode^, ^3flag^, ^4dont_inherit^, ^5optimize^)
snippet_complex=complex(^0real^, ^1imaginary^)
snippet_delattr=delattr(^0object^, ^1attribute^)
snippet_enumerate=enumerate(^0iterable^, ^1start^)
snippet_eval=eval(^0expression^, ^1globals^, ^2locals^)
snippet_format=format(^0value^, ^1format^)
snippet_frozenset=frozenset(^0iterable^)
snippet_getattr=getattr(^0object^, ^1attribute^, ^2default^)
snippet_hasattr=hasattr(^0object^, ^1attribute^)
snippet_isinstance=isinstance(^0object^, ^1type^)
snippet_issubclass=issubclass(^0object^, ^1subclass^)
snippet_property=property(fget=^0None^, fset=^1None^, fdel=^2None^, doc=^3None^)
snippet_range=range(^0start^, ^1stop^, ^2step^)
snippet_setattr=setattr(^0object^, ^1name^, ^2value^)
snippet_if=if ^0condition^:\n\t^1pass^\n\belse:\n\t^2pass^\n\b

[JavaScript]
code=import return parse stringify 
snippet_to=typeof
snippet_io=instanceof
snippet_st=setTimeout
snippet_si=setInterval
snippet_foreach=^0:array^.forEach((^1^}) => {\n\t ^2^\n\b});
snippet_map=^0array^.map((^1element^) => {\n\t ^2^\n\b});
snippet_reduce=^0array^.reduce((^1accumulator^, ^2currentValue^) => {\n\t ^3^\n\b});
snippet_reduceright=^0array^.reduceRight((^1accumulator^, ^2currentValue^) => {\n\t ^3^\n\b});
snippet_find=^0array^.find((^1element^) => {\n\t ^2^\n\b});
snippet_findindex=^0array^.findIndex((^1element^) => {\n\t ^2^\n\b});
snippet_some=^0array^.some((^1element^) => {\n\t ^2^\n\b});
snippet_flatmap=^0array^.flatMap((^1element^) => {\n\t ^2^\n\b});
snippet_ca=const ^0name^ = ^1^
snippet_la=let ^0name^ = ^1^
snippet_cad=const { ^0key^ } = ^1object^;
snippet_lad=let { ^0key^ } = ^1object^;
snippet_do=do {\n} while(^0true^);
snippet_for=for (^0size_t^ ^1i^ = 0; ^1i^ < ^2count^; ++^1i^) {\n}
snippet_while=while (^0true^) {\n}
snippet_function=function ^0name^(^1^) {\n}
snippet_cl=console.log(^0^);
snippet_ce=console.error(^0^);
snippet_isnil=typeof ^0value^ === 'undefined' || ^0value^ === null





