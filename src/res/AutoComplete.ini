[C Sharp]
snippet_attribute=[global::System.AttributeUsage(global::System.AttributeTargets.^1All^, Inherited = ^2false^, AllowMultiple = ^3true^)]\nsealed class ^4MyAttribute^ : global::System.Attribute\n{\n\t// See the attribute guidelines at\n\t//  http://go.microsoft.com/fwlink/?LinkId=85236\n\treadonly string positionalString;\n\n\t// This is a positional argument\n\tpublic ^4MyAttribute^(string positionalString)\n\t{\n\t\tthis.positionalString = positionalString;\n\n\t\t// TODO: Implement code here\n\n\t\tthrow new global::System.NotImplementedException();\n\t}\n\n\tpublic string PositionalString\n\t{\n\t\tget { return positionalString; }\n\t}\n\n\t// This is a named argument\n\tpublic int NamedInt { get; set; }\n}
snippet_class=class ^1MyClass^\n{\n\t^0^\n}\n
snippet_cw=global::System.Console.WriteLine();
snippet_do=do\n{\n\t^0^\n} while(^1true^);
snippet_enum=enum ^1MyEnum^\n{\n\t^0^\n}\n
snippet_equals=public override bool Equals(object obj)\n{\n\t//\n\t// See the full list of guidelines at\n\t//   http://go.microsoft.com/fwlink/?LinkID=85237\n\t// and also the guidance for operator== at\n\t//   http://go.microsoft.com/fwlink/?LinkId=85238\n\t//\n\n\tif (obj == null || GetType() != obj.GetType())\n\t{\n\t\treturn false;\n\t}\n\n\t// TODO: write your implementation of Equals() here\n\tthrow new global::System.NotImplementedException();\n\treturn base.Equals(obj);\n}\n
snippet_exception=[global::System.Serializable]\npublic class ^1MyException^ : ^2global::System.Exception^\n{\n\tpublic ^1MyException^() { }\n\tpublic ^1MyException^(string message) : base(message) { }\n\tpublic ^1MyException^(string message, global::System.Exception inner) : base(message, inner) { }\n\tprotected ^1MyException^(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context) { }\n}\n
snippet_for=for (^1int^ ^2i^ = 0; ^2i^ < ^3lenght^; ++^2i^)\n{\n\t^0^\n}
snippet_foreach=foreach (^1var^ ^2item^ in ^3collection^)\n{\n\t^0^\n}
snippet_forr=for (^1int^ ^2i^ = ^3lenght^; ^2i^ >= 0; --^2i^)\n{\n\t^0^\n}
snippet_indexer=public ^1object^ this[^2int^ index]\n{\n\tget { /* return the specified index here */ }\n\tset { /* set the specified index to value here */ }\n}
snippet_interface=interface I^1Interface^\n{\n\t^0^\n}
snippet_iterator=public System.Collections.Generic.IEnumerator<^1ElementType^> GetEnumerator()\n{\n\tthrow new global::System.NotImplementedException();\n\tyield return default(^1ElementType^);\n}
snippet_lock=lock (^1this^)\n{\n\t^0^\n}
snippet_mbox=global::System.Windows.Forms.MessageBox.Show(^1"Test"^);
snippet_namespace=namespace ^name^\n{\n^0^\n}
snippet_prop=public ^1int^ ^2MyProperty^ { get; set; }
snippet_propa=public static ^1int^ Get^2MyProperty^(DependencyObject obj)\n{\n\treturn (^1int^)obj.GetValue(^2MyProperty^Property);\n}\n\npublic static void Set^2MyProperty^(DependencyObject obj, ^1int^ value)\n{\n\tobj.SetValue(^2MyProperty^Property, value);\n}\n\n// Using a DependencyProperty as the backing store for ^2MyProperty^.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty ^2MyProperty^Property = DependencyProperty.RegisterAttached("^2MyProperty^", typeof(^1int^), typeof(^3ownerclass^), new PropertyMetadata(^40^));\n
snippet_propdp=public ^1int^ ^2MyProperty^\n{\n\tget { return (^1int^)GetValue(^2MyPropertyProperty^); }\n\tset { SetValue(^2MyProperty^Property, value); }\n}\n\n// Using a DependencyProperty as the backing store for ^2MyProperty^.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty ^2MyProperty^Property = DependencyProperty.Register("MyProperty", typeof(^1int^), typeof(^3ownerclass^), new PropertyMetadata(^40^));\n
snippet_switch=switch (^1switch_on^)\n{\n\tdefault:^0^\n\tbreak;\n}\n
snippet_try=try\n{\n\t^0^\n}\ncatch (^1global::System.Exception^)\n{\n\tthrow;\n}\n
snippet_while=while (^1true^)\n{\n\t^0^\n}

[C/C++]
snippet_class=class ^1MyClass^\n{\npublic:\n\t^1MyClass^();\n\t~^1MyClass^();\n\nprotected:\n\nprivate:\n\n};\n
snippet_do=do\n{\n\t^0^\n} while(^1true^);
snippet_enum=enum ^1MyEnum^\n{\n\t^0^\n};\n
snippet_for=for (^1size_t^ ^2i^ = 0; ^2i^ < ^3count^; ++^2i^)\n{\n\t^0^\n}
snippet_switch=switch (^1switch_on^)\n{\n\t^0^\n\tdefault:\n\tbreak;\n}\n
snippet_try=try\n{\n\t^0^\n}\ncatch (const std::exception&)\n{\n}\n
snippet_while=while (^1true^)\n{\n\t^0^\n}

[Html]
snippet_a=a href="^1#^">^2content^</a>
snippet_base=base href="^1/^" />
snippet_form=form action="^1/^" method="^2post^">^0^</form>
snippet_html=html xmlns="http://www.w3.org/1999/xhtml">\n<head>\n\t<title>^0^</title>\n</head>\n<body>\n</body>\n</html>
snippet_iframe=iframe src="^1file.html^">^0^</iframe>
snippet_picture=picture>\n\t<source media="(min-width: 465px)" srcset="^1file^-small.jpg" />\n\t<source media="(min-width: 650px)" srcset="^1file^-medium.jpg" />\n\t<img src="^1file^.jpg" alt="^0^" />\n</picture>
snippet_region=<!-- #region name -->\n<!-- #endregion -->
snippet_select=select>\n\t<option value="^1value^">^2text^</option>\n</select>
snippet_table=table>\n\t<tr>\n\t\t<td>^0^</td>\n\t</tr>\n</table>
snippet_ul=ul>\n\t<li>^0^</li>\n</ul>\n

[JavaScript]
snippet_do=do {\n\t^0^\n} while(^1true^);
snippet_find=^1array^.find((^2element^) => {\n\t ^3^});
snippet_findindex=^1array^.findIndex((^2element^) => {\n\t ^3^});
snippet_flatmap=^1array^.flatMap((^2element^) => {\n\t ^3^});
snippet_foreach=^1:array^.forEach((^2^}) => {\n\t ^3^});
snippet_isnil=typeof ^1value^ === 'undefined' || ^1value^ === null
snippet_map=^1array^.map((^2element^) => {\n\t ^3^});
snippet_reduce=^1array^.reduce((^2accumulator^, ^3currentValue^) => {\n\t ^4^});
snippet_reduceright=^1array^.reduceRight((^2accumulator^, ^3currentValue^) => {\n\t ^4^});
snippet_some=^1array^.some((^2element^) => {\n\t ^3^});
snippet_while=while (^1true^) {\n\t^0^\n}
snippet_alert=alert(^1content^);
snippet_case=case ^1condition^:\n\t^0^break;\n
snippet_catch=catch (^1ex^) {\n\t^0^\n}
snippet_const=const ^1variable^ = ^2value^;^0^
snippet_default=default:\n\t^0^break;
snippet_else=else {\n\t^0^\n}
snippet_for=for (var ^1i^ = 0; ^1i^ < ^2count^; ++^1i^) {\n\t^0^\n}
snippet_forin=for (var ^1variable^ in ^2object^) {\n\t^0^\n}
snippet_forof=for (^3var^ ^1variable^ of ^2collection^) {\n\t^0^\n}
snippet_function=function ^1name^(^2parameters^) {\n\t^0^\n}
snippet_if=if (^1condition^) {\n\t^0^\n}
snippet_instanceof=instanceof
snippet_let=let ^1name^ = ^2^;^0^
snippet_switch=switch (^1variable^) {\n\tcase ^2condition^:\n\t\t^0^break;\n}
snippet_try=try {\n\t^0^\n}\ncatch (^1ex^) {\n}
snippet_typeof=typeof(^0^)
snippet_var=var ^1name^ = ^2^;^0^

[Python]
snippet_bytes=bytes(^1x^, ^2encoding^, ^3error^)
snippet_callable=callable(^1object^)
snippet_compile=compile(^1source^, ^2filename^, ^3mode^, ^4flag^, ^5dont_inherit^, ^6optimize^)
snippet_complex=complex(^1real^, ^2imaginary^)
snippet_delattr=delattr(^1object^, ^2attribute^)
snippet_enumerate=enumerate(^1iterable^, ^2start^)
snippet_eval=eval(^1expression^, ^2globals^, ^3locals^)
snippet_format=format(^1value^, ^2format^)
snippet_frozenset=frozenset(^1iterable^)
snippet_getattr=getattr(^1object^, ^2attribute^, ^3default^)
snippet_hasattr=hasattr(^1object^, ^2attribute^)
snippet_if=if ^1condition^:\n\t^2pass^\nelse:\n\t^3pass^
snippet_isinstance=isinstance(^1object^, ^2type^)
snippet_issubclass=issubclass(^1object^, ^2subclass^)
snippet_property=property(fget=^1None^, fset=^2None^, fdel=^3None^, doc=^4None^)
snippet_range=range(^1start^, ^2stop^, ^3step^)
snippet_setattr=setattr(^1object^, ^2name^, ^3value^)
