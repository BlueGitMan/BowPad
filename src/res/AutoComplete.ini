[C/C++]
code = typedef constexpr unique_ptr shared_ptr CreateFile ReadFile WriteFile
snippet_do=do\n{\n} while(^1true^);
snippet_for=for (^1size_t^ ^2i^ = 0; ^2i^ < ^3count^; ++^2i^)\n{\n\t^0^\n\b}
snippet_while=while (^1true^)\n{\n\t^0^\n\b}
snippet_class=class ^1MyClass^\n{\npublic:\n\t^1MyClass^();\n~^1MyClass^();\n\b\n\bprotected:\n\nprivate:\n\n};\n
snippet_enum=enum ^1MyEnum^\n{\n};\n
snippet_switch=switch (^1switch_on^)\n{\tdefault:\nbreak;\n}\n
snippet_try=try\n{\n}\ncatch (const std::exception&)\n{\n}\n
snippet_test=this is a Test
snippet_test2=this is ^0^anoter test

[C Sharp]
snippet_attribute=[global::System.AttributeUsage(global::System.AttributeTargets.^1All^, Inherited = ^2false^, AllowMultiple = ^3true^)]\nsealed class ^4MyAttribute^ : global::System.Attribute\n{\n\t// See the attribute guidelines at\n//  http://go.microsoft.com/fwlink/?LinkId=85236\nreadonly string positionalString;\n\n// This is a positional argument\npublic ^4MyAttribute^(string positionalString)\n{\n\tthis.positionalString = positionalString;\n\n// TODO: Implement code here\n\nthrow new global::System.NotImplementedException();\n\b}\n\npublic string PositionalString\n{\n\tget { return positionalString; }\n\b}\n\n// This is a named argument\npublic int NamedInt { get; set; }\n\b}\n
snippet_class=class ^1MyClass^\n{\n\n}\n
snippet_cw=global::System.Console.WriteLine();
snippet_do=do\n{\n} while(^1true^);
snippet_enum=enum ^1MyEnum^\n{\n\n}\n
snippet_equals=public override bool Equals(object obj)\n{\n\t//\n// See the full list of guidelines at\n//   http://go.microsoft.com/fwlink/?LinkID=85237\n// and also the guidance for operator== at\n//   http://go.microsoft.com/fwlink/?LinkId=85238\n//\n\nif (obj == null || GetType() != obj.GetType())\n{\n\treturn false;\n\b}\n\n// TODO: write your implementation of Equals() here\nthrow new global::System.NotImplementedException();\nreturn base.Equals(obj);\n\b}\n
snippet_exception=[global::System.Serializable]\npublic class ^1MyException^ : ^2global::System.Exception^\n{\n\tpublic ^1MyException^() { }\npublic ^1MyException^(string message) : base(message) { }\npublic ^1MyException^(string message, global::System.Exception inner) : base(message, inner) { }\nprotected ^1MyException^(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context) { }\n\b}\n
snippet_for=for (^1int^ ^2i^ = 0; ^2i^ < ^3lenght^; ++^2i^)\n{\n}
snippet_foreach=foreach (^1var^ ^2item^ in ^3collection^)\n{\n}
snippet_forr=for (^1int^ ^2i^ = ^3lenght^; ^2i^ >= 0; --^2i^)\n{\n}
snippet_indexer=public ^1object^ this[^2int^ index]\n{\n\tget { /* return the specified index here */ }\nset { /* set the specified index to value here */ }\n\b}
snippet_interface=interface I^1Interface^\n{\n}
snippet_iterator=public System.Collections.Generic.IEnumerator<^1ElementType^> GetEnumerator()\n{\n\tthrow new global::System.NotImplementedException();\nyield return default(^1ElementType^);\n\b}
snippet_lock=lock (^1this^)\n{\n}
snippet_mbox=global::System.Windows.Forms.MessageBox.Show(^1"Test"^);
snippet_namespace=namespace ^name^\n{\n}
snippet_prop=public ^1int^ ^2MyProperty^ { get; set; }
snippet_propa=public static ^1int^ Get^2MyProperty^(DependencyObject obj)\n{\n\treturn (^1int^)obj.GetValue(^2MyProperty^Property);\n\b}\n\npublic static void Set^2MyProperty^(DependencyObject obj, ^1int^ value)\n{\n\tobj.SetValue(^2MyProperty^Property, value);\n\b}\n\n// Using a DependencyProperty as the backing store for ^2MyProperty^.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty ^2MyProperty^Property = DependencyProperty.RegisterAttached("^2MyProperty^", typeof(^1int^), typeof(^3ownerclass^), new PropertyMetadata(^40^));\n
snippet_propdp=public ^1int^ ^2MyProperty^\n{\n\tget { return (^1int^)GetValue(^2MyPropertyProperty^); }\nset { SetValue(^2MyProperty^Property, value); }\n\b}\n\n// Using a DependencyProperty as the backing store for ^2MyProperty^.  This enables animation, styling, binding, etc...\npublic static readonly DependencyProperty ^2MyProperty^Property = DependencyProperty.Register("MyProperty", typeof(^1int^), typeof(^3ownerclass^), new PropertyMetadata(^40^));\n
snippet_switch=switch (^1switch_on^)\n{\tdefault:\n}\n
snippet_try=try\n{\n}\ncatch (^1global::System.Exception^)\n{\n\tthrow;\n\b}\n
snippet_while=while (^1true^)\n{\n}

[Html]
snippet_a=a href="^1#^">^2content^</a>
snippet_base=base href="^1/^" />
snippet_form=form action="^1/^" method="^2post^"></form>
snippet_html=html xmlns="http://www.w3.org/1999/xhtml">\n\t<head>\n\t<title></title>\n\b</head>\n<body>\n</body>\n\b</html>
snippet_iframe=iframe src="^1file.html^"></iframe>
snippet_link=link href="^1#^" rel="stylesheet" />
snippet_picture=picture>\n\t<source media="(min-width: 465px)" srcset="^1file^-small.jpg" />\n<source media="(min-width: 650px)" srcset="^1file^-medium.jpg" />\n<img src="^1file^.jpg" alt="" />\n\b</picture>
snippet_region=<!-- #region name -->\n<!-- #endregion -->
snippet_select=select>\n\t<option value="^1value^">^2text^</option>\n\b</select>
snippet_svg=svg xmlns="http://www.w3.org/2000/svg">^0^</svg>
snippet_table=table>\n\t<tr>\n\t<td>^0^</td>\n\b</tr>\n\b</table>
snippet_ul=ul>\n\t<li>^0^</li>\n\b</ul>\n


[CSS]
code=after before html body hover content code footer header media
snippet_font-face=font-face {\n\tfont-family: '^1font name^';\nsrc: url('^2/content/file^.eot');\nsrc: local('☺'), url('^2/content/file^.woff') format('woff'), url('^2/content/file^.ttf') format('truetype');\n\b}
snippet_keyframes=keyframes name {\n\tfrom {\n\tbackground: red;\n\b}\n\nto {\n\tbackground: yellow;\n\b}\n\b}\n\n@-moz-keyframes name {\n}\n\n@-webkit-keyframes name {\n}\n
snippet_media=media only screen and (max-width: ^11024^px) and (max-height: ^2768^px) {\n}

[Python]
code=import except print
snippet_bytes=bytes(^1x^, ^2encoding^, ^3error^)
snippet_callable=callable(^1object^)
snippet_compile=compile(^1source^, ^2filename^, ^3mode^, ^4flag^, ^5dont_inherit^, ^6optimize^)
snippet_complex=complex(^1real^, ^2imaginary^)
snippet_delattr=delattr(^1object^, ^2attribute^)
snippet_enumerate=enumerate(^1iterable^, ^2start^)
snippet_eval=eval(^1expression^, ^2globals^, ^3locals^)
snippet_format=format(^1value^, ^2format^)
snippet_frozenset=frozenset(^1iterable^)
snippet_getattr=getattr(^1object^, ^2attribute^, ^3default^)
snippet_hasattr=hasattr(^1object^, ^2attribute^)
snippet_isinstance=isinstance(^1object^, ^2type^)
snippet_issubclass=issubclass(^1object^, ^2subclass^)
snippet_property=property(fget=^1None^, fset=^2None^, fdel=^3None^, doc=^4None^)
snippet_range=range(^1start^, ^2stop^, ^3step^)
snippet_setattr=setattr(^1object^, ^2name^, ^3value^)
snippet_if=if ^1condition^:\n\t^2pass^\n\belse:\n\t^3pass^\n\b

[JavaScript]
code=import return parse stringify 
snippet_to=typeof
snippet_io=instanceof
snippet_st=setTimeout
snippet_si=setInterval
snippet_foreach=^1:array^.forEach((^2^}) => {\n\t ^3^\n\b});
snippet_map=^1array^.map((^2element^) => {\n\t ^3^\n\b});
snippet_reduce=^1array^.reduce((^2accumulator^, ^3currentValue^) => {\n\t ^4^\n\b});
snippet_reduceright=^1array^.reduceRight((^2accumulator^, ^3currentValue^) => {\n\t ^4^\n\b});
snippet_find=^1array^.find((^2element^) => {\n\t ^3^\n\b});
snippet_findindex=^1array^.findIndex((^2element^) => {\n\t ^3^\n\b});
snippet_some=^1array^.some((^2element^) => {\n\t ^3^\n\b});
snippet_flatmap=^1array^.flatMap((^2element^) => {\n\t ^3^\n\b});
snippet_ca=const ^1name^ = ^2^
snippet_la=let ^1name^ = ^2^
snippet_cad=const { ^1key^ } = ^2object^;
snippet_lad=let { ^1key^ } = ^2object^;
snippet_do=do {\n} while(^1true^);
snippet_for=for (^1size_t^ ^2i^ = 0; ^2i^ < ^3count^; ++^2i^) {\n}
snippet_while=while (^1true^) {\n}
snippet_function=function ^1name^(^2^) {\n}
snippet_cl=console.log(^0^);
snippet_ce=console.error(^0^);
snippet_isnil=typeof ^1value^ === 'undefined' || ^1value^ === null





